{"ast":null,"code":"var _jsxFileName = \"/home/krishna/Desktop/vector/frontend/src/nodes/textNode.js\",\n  _s = $RefreshSig$();\n// textNode.js\n\nimport { BaseNode } from './BaseNode';\nimport { useStore } from '../store';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const updateNodeField = useStore(state => state.updateNodeField);\n  const [variables, setVariables] = useState([]);\n\n  // Function to extract variables from text\n  const extractVariables = text => {\n    const regex = /{{([^}]+)}}/g;\n    const matches = [...text.matchAll(regex)];\n    return [...new Set(matches.map(match => match[1]))];\n  };\n\n  // Update variables whenever text changes\n  useEffect(() => {\n    if (data.text) {\n      const newVariables = extractVariables(data.text);\n      setVariables(newVariables);\n    }\n  }, [data.text]);\n\n  // Create handles for each variable\n  const variableHandles = variables.map((variable, index) => ({\n    id: `input-${variable}`,\n    type: 'target',\n    position: 'left',\n    style: {\n      top: `${(index + 1) * 30}px`\n    },\n    label: variable\n  }));\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: data,\n    title: \"Text\",\n    outputs: [{\n      id: 'output',\n      label: 'Output'\n    }],\n    inputs: variableHandles,\n    fields: [{\n      type: 'textarea',\n      name: 'text',\n      label: 'Text',\n      defaultValue: '{{input}}',\n      rows: 2,\n      style: {\n        width: '100%',\n        minHeight: '40px',\n        resize: 'none',\n        overflow: 'hidden',\n        padding: '8px',\n        boxSizing: 'border-box',\n        fontFamily: 'monospace'\n      },\n      onInput: e => {\n        // Auto-resize the textarea\n        e.target.style.height = 'auto';\n        e.target.style.height = `${Math.max(40, e.target.scrollHeight)}px`;\n\n        // Update the node's height to accommodate the textarea\n        const nodeElement = e.target.closest('.react-flow__node');\n        if (nodeElement) {\n          nodeElement.style.height = 'auto';\n        }\n      }\n    }],\n    onFieldChange: (fieldName, value) => updateNodeField(id, fieldName, value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"CAQvXJ0AwL1yhKPfeI6fjSmO50k=\", false, function () {\n  return [useStore];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["BaseNode","useStore","useEffect","useState","jsxDEV","_jsxDEV","TextNode","id","data","_s","updateNodeField","state","variables","setVariables","extractVariables","text","regex","matches","matchAll","Set","map","match","newVariables","variableHandles","variable","index","type","position","style","top","label","title","outputs","inputs","fields","name","defaultValue","rows","width","minHeight","resize","overflow","padding","boxSizing","fontFamily","onInput","e","target","height","Math","max","scrollHeight","nodeElement","closest","onFieldChange","fieldName","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/krishna/Desktop/vector/frontend/src/nodes/textNode.js"],"sourcesContent":["// textNode.js\r\n\r\nimport { BaseNode } from './BaseNode';\r\nimport { useStore } from '../store';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const TextNode = ({ id, data }) => {\r\n  const updateNodeField = useStore((state) => state.updateNodeField);\r\n  const [variables, setVariables] = useState([]);\r\n\r\n  // Function to extract variables from text\r\n  const extractVariables = (text) => {\r\n    const regex = /{{([^}]+)}}/g;\r\n    const matches = [...text.matchAll(regex)];\r\n    return [...new Set(matches.map(match => match[1]))];\r\n  };\r\n\r\n  // Update variables whenever text changes\r\n  useEffect(() => {\r\n    if (data.text) {\r\n      const newVariables = extractVariables(data.text);\r\n      setVariables(newVariables);\r\n    }\r\n  }, [data.text]);\r\n\r\n  // Create handles for each variable\r\n  const variableHandles = variables.map((variable, index) => ({\r\n    id: `input-${variable}`,\r\n    type: 'target',\r\n    position: 'left',\r\n    style: { top: `${(index + 1) * 30}px` },\r\n    label: variable\r\n  }));\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      data={data}\r\n      title=\"Text\"\r\n      outputs={[{ id: 'output', label: 'Output' }]}\r\n      inputs={variableHandles}\r\n      fields={[\r\n        {\r\n          type: 'textarea',\r\n          name: 'text',\r\n          label: 'Text',\r\n          defaultValue: '{{input}}',\r\n          rows: 2,\r\n          style: {\r\n            width: '100%',\r\n            minHeight: '40px',\r\n            resize: 'none',\r\n            overflow: 'hidden',\r\n            padding: '8px',\r\n            boxSizing: 'border-box',\r\n            fontFamily: 'monospace'\r\n          },\r\n          onInput: (e) => {\r\n            // Auto-resize the textarea\r\n            e.target.style.height = 'auto';\r\n            e.target.style.height = `${Math.max(40, e.target.scrollHeight)}px`;\r\n            \r\n            // Update the node's height to accommodate the textarea\r\n            const nodeElement = e.target.closest('.react-flow__node');\r\n            if (nodeElement) {\r\n              nodeElement.style.height = 'auto';\r\n            }\r\n          }\r\n        }\r\n      ]}\r\n      onFieldChange={(fieldName, value) => updateNodeField(id, fieldName, value)}\r\n    />\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}