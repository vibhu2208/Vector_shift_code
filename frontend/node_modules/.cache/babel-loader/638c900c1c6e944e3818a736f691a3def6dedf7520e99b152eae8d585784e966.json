{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\Reseachpaper\\\\vector\\\\vector\\\\frontend\\\\src\\\\nodes\\\\textNode.js\",\n  _s = $RefreshSig$();\nimport { BaseNode } from './BaseNode';\nimport { useStore } from '../store';\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { Position } from 'reactflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const updateNodeField = useStore(state => state.updateNodeField);\n  const [variables, setVariables] = useState([]);\n  const [dimensions, setDimensions] = useState({\n    width: 200,\n    height: 120\n  });\n  const textareaRef = useRef(null);\n  const containerRef = useRef(null);\n  const extractVariables = text => {\n    if (!text) return [];\n    const regex = /{{\\s*([a-zA-Z_$][\\w$]*)\\s*}}/g;\n    const matches = [...text.matchAll(regex)];\n    return [...new Set(matches.map(match => match[1]))];\n  };\n  const calculateDimensions = useCallback(text => {\n    if (!text) return {\n      width: 200,\n      height: 120\n    };\n    const lines = text.split('\\n');\n    const maxLineLength = Math.max(...lines.map(line => line.length));\n\n    // Calculate width based on content\n    const charWidth = 8; // Approximate character width in monospace\n    const padding = 40; // Account for padding and borders\n    const minWidth = 200;\n    const maxWidth = 300;\n    const calculatedWidth = Math.max(minWidth, Math.min(maxWidth, maxLineLength * charWidth + padding));\n\n    // Calculate height based on number of lines and variables\n    const lineHeight = 20;\n    const baseHeight = 80;\n    const variableHandleHeight = variables.length * 25;\n    const textHeight = lines.length * lineHeight;\n    const calculatedHeight = Math.max(120, baseHeight + textHeight + Math.max(0, variableHandleHeight - 20));\n    return {\n      width: calculatedWidth,\n      height: calculatedHeight\n    };\n  }, [variables.length]);\n  useEffect(() => {\n    if (data.text) {\n      const newVariables = extractVariables(data.text);\n      setVariables(newVariables);\n      const newDimensions = calculateDimensions(data.text);\n      setDimensions(newDimensions);\n    }\n  }, [data.text, calculateDimensions]);\n  const handleTextChange = e => {\n    const newText = e.target.value;\n    updateNodeField(id, 'text', newText);\n\n    // Auto-resize textarea\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n  };\n\n  // Create input handles for variables\n  const variableHandles = variables.map((variable, index) => ({\n    id: `input-${variable}`,\n    label: variable,\n    position: Position.Left,\n    style: {\n      top: `${50 + index * 25}px`,\n      background: '#2196f3'\n    }\n  }));\n  const customContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        display: 'block',\n        fontSize: '11px',\n        marginBottom: '4px',\n        color: '#666',\n        fontWeight: '500'\n      },\n      children: \"Text Content:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      value: data.text || '',\n      onChange: handleTextChange,\n      placeholder: \"Enter text here. Use {{variableName}} for variables.\",\n      style: {\n        width: '100%',\n        minHeight: '60px',\n        resize: 'none',\n        overflow: 'hidden',\n        padding: '8px',\n        border: '1px solid #ddd',\n        borderRadius: '4px',\n        fontFamily: 'monospace',\n        fontSize: '12px',\n        lineHeight: '1.4',\n        boxSizing: 'border-box'\n      },\n      onInput: e => {\n        e.target.style.height = 'auto';\n        e.target.style.height = `${e.target.scrollHeight}px`;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), variables.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '10px',\n        color: '#2196f3',\n        marginTop: '4px',\n        fontStyle: 'italic'\n      },\n      children: [\"Variables detected: \", variables.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      display: 'inline-block',\n      minWidth: dimensions.width,\n      minHeight: dimensions.height\n    },\n    children: /*#__PURE__*/_jsxDEV(BaseNode, {\n      id: id,\n      data: data,\n      title: \"Text\",\n      inputs: variableHandles,\n      outputs: [{\n        id: 'output',\n        label: 'Text Output',\n        position: Position.Right\n      }],\n      content: customContent,\n      style: {\n        width: dimensions.width,\n        minHeight: dimensions.height,\n        transition: 'all 0.3s ease'\n      },\n      onFieldChange: (field, value) => updateNodeField(id, field, value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"lzMBfn0o8k1fzlf1MzNYsY/uY5o=\", false, function () {\n  return [useStore];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["BaseNode","useStore","useEffect","useRef","useState","useCallback","Position","jsxDEV","_jsxDEV","TextNode","id","data","_s","updateNodeField","state","variables","setVariables","dimensions","setDimensions","width","height","textareaRef","containerRef","extractVariables","text","regex","matches","matchAll","Set","map","match","calculateDimensions","lines","split","maxLineLength","Math","max","line","length","charWidth","padding","minWidth","maxWidth","calculatedWidth","min","lineHeight","baseHeight","variableHandleHeight","textHeight","calculatedHeight","newVariables","newDimensions","handleTextChange","e","newText","target","value","textarea","current","style","scrollHeight","variableHandles","variable","index","label","position","Left","top","background","customContent","marginBottom","children","display","fontSize","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","placeholder","minHeight","resize","overflow","border","borderRadius","fontFamily","boxSizing","onInput","marginTop","fontStyle","join","title","inputs","outputs","Right","content","transition","onFieldChange","field","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/Reseachpaper/vector/vector/frontend/src/nodes/textNode.js"],"sourcesContent":["import { BaseNode } from './BaseNode';\r\nimport { useStore } from '../store';\r\nimport { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { Position } from 'reactflow';\r\n\r\nexport const TextNode = ({ id, data }) => {\r\n  const updateNodeField = useStore((state) => state.updateNodeField);\r\n  const [variables, setVariables] = useState([]);\r\n  const [dimensions, setDimensions] = useState({ width: 200, height: 120 });\r\n  const textareaRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  const extractVariables = (text) => {\r\n    if (!text) return [];\r\n    const regex = /{{\\s*([a-zA-Z_$][\\w$]*)\\s*}}/g;\r\n    const matches = [...text.matchAll(regex)];\r\n    return [...new Set(matches.map(match => match[1]))];\r\n  };\r\n\r\n  const calculateDimensions = useCallback((text) => {\r\n    if (!text) return { width: 200, height: 120 };\r\n    \r\n    const lines = text.split('\\n');\r\n    const maxLineLength = Math.max(...lines.map(line => line.length));\r\n    \r\n    // Calculate width based on content\r\n    const charWidth = 8; // Approximate character width in monospace\r\n    const padding = 40; // Account for padding and borders\r\n    const minWidth = 200;\r\n    const maxWidth = 300;\r\n    const calculatedWidth = Math.max(minWidth, Math.min(maxWidth, maxLineLength * charWidth + padding));\r\n    \r\n    // Calculate height based on number of lines and variables\r\n    const lineHeight = 20;\r\n    const baseHeight = 80;\r\n    const variableHandleHeight = variables.length * 25;\r\n    const textHeight = lines.length * lineHeight;\r\n    const calculatedHeight = Math.max(120, baseHeight + textHeight + Math.max(0, variableHandleHeight - 20));\r\n    \r\n    return { width: calculatedWidth, height: calculatedHeight };\r\n  }, [variables.length]);\r\n\r\n  useEffect(() => {\r\n    if (data.text) {\r\n      const newVariables = extractVariables(data.text);\r\n      setVariables(newVariables);\r\n      \r\n      const newDimensions = calculateDimensions(data.text);\r\n      setDimensions(newDimensions);\r\n    }\r\n  }, [data.text, calculateDimensions]);\r\n\r\n  const handleTextChange = (e) => {\r\n    const newText = e.target.value;\r\n    updateNodeField(id, 'text', newText);\r\n    \r\n    // Auto-resize textarea\r\n    const textarea = textareaRef.current;\r\n    if (textarea) {\r\n      textarea.style.height = 'auto';\r\n      textarea.style.height = `${textarea.scrollHeight}px`;\r\n    }\r\n  };\r\n\r\n  // Create input handles for variables\r\n  const variableHandles = variables.map((variable, index) => ({\r\n    id: `input-${variable}`,\r\n    label: variable,\r\n    position: Position.Left,\r\n    style: { \r\n      top: `${50 + index * 25}px`,\r\n      background: '#2196f3'\r\n    }\r\n  }));\r\n\r\n  const customContent = (\r\n    <div style={{ marginBottom: '8px' }}>\r\n      <label style={{ \r\n        display: 'block', \r\n        fontSize: '11px', \r\n        marginBottom: '4px',\r\n        color: '#666',\r\n        fontWeight: '500'\r\n      }}>\r\n        Text Content:\r\n      </label>\r\n      <textarea\r\n        ref={textareaRef}\r\n        value={data.text || ''}\r\n        onChange={handleTextChange}\r\n        placeholder=\"Enter text here. Use {{variableName}} for variables.\"\r\n        style={{\r\n          width: '100%',\r\n          minHeight: '60px',\r\n          resize: 'none',\r\n          overflow: 'hidden',\r\n          padding: '8px',\r\n          border: '1px solid #ddd',\r\n          borderRadius: '4px',\r\n          fontFamily: 'monospace',\r\n          fontSize: '12px',\r\n          lineHeight: '1.4',\r\n          boxSizing: 'border-box'\r\n        }}\r\n        onInput={(e) => {\r\n          e.target.style.height = 'auto';\r\n          e.target.style.height = `${e.target.scrollHeight}px`;\r\n        }}\r\n      />\r\n      {variables.length > 0 && (\r\n        <div style={{ \r\n          fontSize: '10px', \r\n          color: '#2196f3', \r\n          marginTop: '4px',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          Variables detected: {variables.join(', ')}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      style={{ \r\n        display: 'inline-block',\r\n        minWidth: dimensions.width,\r\n        minHeight: dimensions.height\r\n      }}\r\n    >\r\n      <BaseNode\r\n        id={id}\r\n        data={data}\r\n        title=\"Text\"\r\n        inputs={variableHandles}\r\n        outputs={[{ \r\n          id: 'output', \r\n          label: 'Text Output',\r\n          position: Position.Right\r\n        }]}\r\n        content={customContent}\r\n        style={{\r\n          width: dimensions.width,\r\n          minHeight: dimensions.height,\r\n          transition: 'all 0.3s ease'\r\n        }}\r\n        onFieldChange={(field, value) => updateNodeField(id, field, value)}\r\n      />\r\n    </div>\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}