{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\Reseachpaper\\\\vector\\\\vector\\\\frontend\\\\src\\\\nodes\\\\newNodes\\\\ConditionalNode.js\",\n  _s = $RefreshSig$();\nimport { BaseNode } from '../BaseNode';\nimport { useStore } from '../../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConditionalNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const updateNodeField = useStore(state => state.updateNodeField);\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: data,\n    title: \"Conditional\",\n    inputs: [{\n      id: 'condition',\n      label: 'Condition'\n    }, {\n      id: 'true_input',\n      label: 'True'\n    }, {\n      id: 'false_input',\n      label: 'False'\n    }],\n    outputs: [{\n      id: 'output',\n      label: 'Output'\n    }],\n    fields: [{\n      type: 'select',\n      name: 'operator',\n      label: 'Operator',\n      defaultValue: 'equals',\n      options: [{\n        value: 'equals',\n        label: 'Equals (==)'\n      }, {\n        value: 'not_equals',\n        label: 'Not Equals (!=)'\n      }, {\n        value: 'greater_than',\n        label: 'Greater Than (>)'\n      }, {\n        value: 'less_than',\n        label: 'Less Than (<)'\n      }, {\n        value: 'contains',\n        label: 'Contains'\n      }]\n    }, {\n      type: 'text',\n      name: 'compareValue',\n      label: 'Compare Value',\n      defaultValue: '',\n      placeholder: 'Value to compare against'\n    }],\n    content: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        fontSize: '10px',\n        color: '#666'\n      },\n      children: \"\\uD83D\\uDD00 If-Then-Else\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this),\n    onFieldChange: (fieldName, value) => updateNodeField(id, fieldName, value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n_s(ConditionalNode, \"9M95F+dnogx34XmSKZ0PPO6DKMs=\", false, function () {\n  return [useStore];\n});\n_c = ConditionalNode;\nvar _c;\n$RefreshReg$(_c, \"ConditionalNode\");","map":{"version":3,"names":["BaseNode","useStore","jsxDEV","_jsxDEV","ConditionalNode","id","data","_s","updateNodeField","state","title","inputs","label","outputs","fields","type","name","defaultValue","options","value","placeholder","content","style","fontSize","color","children","fileName","_jsxFileName","lineNumber","columnNumber","onFieldChange","fieldName","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/Reseachpaper/vector/vector/frontend/src/nodes/newNodes/ConditionalNode.js"],"sourcesContent":["import { BaseNode } from '../BaseNode';\r\nimport { useStore } from '../../store';\r\nexport const ConditionalNode = ({ id, data }) => {\r\n  const updateNodeField = useStore((state) => state.updateNodeField);\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      data={data}\r\n      title=\"Conditional\"\r\n      inputs={[\r\n        { id: 'condition', label: 'Condition' },\r\n        { id: 'true_input', label: 'True' },\r\n        { id: 'false_input', label: 'False' }\r\n      ]}\r\n      outputs={[{ id: 'output', label: 'Output' }]}\r\n      fields={[\r\n        {\r\n          type: 'select',\r\n          name: 'operator',\r\n          label: 'Operator',\r\n          defaultValue: 'equals',\r\n          options: [\r\n            { value: 'equals', label: 'Equals (==)' },\r\n            { value: 'not_equals', label: 'Not Equals (!=)' },\r\n            { value: 'greater_than', label: 'Greater Than (>)' },\r\n            { value: 'less_than', label: 'Less Than (<)' },\r\n            { value: 'contains', label: 'Contains' }\r\n          ]\r\n        },\r\n        {\r\n          type: 'text',\r\n          name: 'compareValue',\r\n          label: 'Compare Value',\r\n          defaultValue: '',\r\n          placeholder: 'Value to compare against'\r\n        }\r\n      ]}\r\n      content={<span style={{ fontSize: '10px', color: '#666' }}>ðŸ”€ If-Then-Else</span>}\r\n      onFieldChange={(fieldName, value) => updateNodeField(id, fieldName, value)}\r\n    />\r\n  );\r\n};"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvC,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC,EAAE;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,eAAe,GAAGP,QAAQ,CAAEQ,KAAK,IAAKA,KAAK,CAACD,eAAe,CAAC;EAElE,oBACEL,OAAA,CAACH,QAAQ;IACPK,EAAE,EAAEA,EAAG;IACPC,IAAI,EAAEA,IAAK;IACXI,KAAK,EAAC,aAAa;IACnBC,MAAM,EAAE,CACN;MAAEN,EAAE,EAAE,WAAW;MAAEO,KAAK,EAAE;IAAY,CAAC,EACvC;MAAEP,EAAE,EAAE,YAAY;MAAEO,KAAK,EAAE;IAAO,CAAC,EACnC;MAAEP,EAAE,EAAE,aAAa;MAAEO,KAAK,EAAE;IAAQ,CAAC,CACrC;IACFC,OAAO,EAAE,CAAC;MAAER,EAAE,EAAE,QAAQ;MAAEO,KAAK,EAAE;IAAS,CAAC,CAAE;IAC7CE,MAAM,EAAE,CACN;MACEC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE,UAAU;MAChBJ,KAAK,EAAE,UAAU;MACjBK,YAAY,EAAE,QAAQ;MACtBC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,QAAQ;QAAEP,KAAK,EAAE;MAAc,CAAC,EACzC;QAAEO,KAAK,EAAE,YAAY;QAAEP,KAAK,EAAE;MAAkB,CAAC,EACjD;QAAEO,KAAK,EAAE,cAAc;QAAEP,KAAK,EAAE;MAAmB,CAAC,EACpD;QAAEO,KAAK,EAAE,WAAW;QAAEP,KAAK,EAAE;MAAgB,CAAC,EAC9C;QAAEO,KAAK,EAAE,UAAU;QAAEP,KAAK,EAAE;MAAW,CAAC;IAE5C,CAAC,EACD;MACEG,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,cAAc;MACpBJ,KAAK,EAAE,eAAe;MACtBK,YAAY,EAAE,EAAE;MAChBG,WAAW,EAAE;IACf,CAAC,CACD;IACFC,OAAO,eAAElB,OAAA;MAAMmB,KAAK,EAAE;QAAEC,QAAQ,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAE;IAClFC,aAAa,EAAEA,CAACC,SAAS,EAAEZ,KAAK,KAAKX,eAAe,CAACH,EAAE,EAAE0B,SAAS,EAAEZ,KAAK;EAAE;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEN,CAAC;AAACtB,EAAA,CAxCWH,eAAe;EAAA,QACFH,QAAQ;AAAA;AAAA+B,EAAA,GADrB5B,eAAe;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}