{"ast":null,"code":"\"use client\";\n\n// src/dismissable-layer.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Primitive, dispatchDiscreteCustomEvent } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useEscapeKeydown } from \"@radix-ui/react-use-escape-keydown\";\nimport { jsx } from \"react/jsx-runtime\";\nvar DISMISSABLE_LAYER_NAME = \"DismissableLayer\";\nvar CONTEXT_UPDATE = \"dismissableLayer.update\";\nvar POINTER_DOWN_OUTSIDE = \"dismissableLayer.pointerDownOutside\";\nvar FOCUS_OUTSIDE = \"dismissableLayer.focusOutside\";\nvar originalBodyPointerEvents;\nvar DismissableLayerContext = React.createContext({\n  layers: /* @__PURE__ */new Set(),\n  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */new Set(),\n  branches: /* @__PURE__ */new Set()\n});\nvar DismissableLayer = React.forwardRef((props, forwardedRef) => {\n  const {\n    disableOutsidePointerEvents = false,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    onDismiss,\n    ...layerProps\n  } = props;\n  const context = React.useContext(DismissableLayerContext);\n  const [node, setNode] = React.useState(null);\n  const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n  const [, force] = React.useState({});\n  const composedRefs = useComposedRefs(forwardedRef, node2 => setNode(node2));\n  const layers = Array.from(context.layers);\n  const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);\n  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);\n  const index = node ? layers.indexOf(node) : -1;\n  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n  const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n  const pointerDownOutside = usePointerDownOutside(event => {\n    const target = event.target;\n    const isPointerDownOnBranch = [...context.branches].some(branch => branch.contains(target));\n    if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n    onPointerDownOutside?.(event);\n    onInteractOutside?.(event);\n    if (!event.defaultPrevented) onDismiss?.();\n  }, ownerDocument);\n  const focusOutside = useFocusOutside(event => {\n    const target = event.target;\n    const isFocusInBranch = [...context.branches].some(branch => branch.contains(target));\n    if (isFocusInBranch) return;\n    onFocusOutside?.(event);\n    onInteractOutside?.(event);\n    if (!event.defaultPrevented) onDismiss?.();\n  }, ownerDocument);\n  useEscapeKeydown(event => {\n    const isHighestLayer = index === context.layers.size - 1;\n    if (!isHighestLayer) return;\n    onEscapeKeyDown?.(event);\n    if (!event.defaultPrevented && onDismiss) {\n      event.preventDefault();\n      onDismiss();\n    }\n  }, ownerDocument);\n  React.useEffect(() => {\n    if (!node) return;\n    if (disableOutsidePointerEvents) {\n      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n        originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = \"none\";\n      }\n      context.layersWithOutsidePointerEventsDisabled.add(node);\n    }\n    context.layers.add(node);\n    dispatchUpdate();\n    return () => {\n      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {\n        ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n      }\n    };\n  }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n  React.useEffect(() => {\n    return () => {\n      if (!node) return;\n      context.layers.delete(node);\n      context.layersWithOutsidePointerEventsDisabled.delete(node);\n      dispatchUpdate();\n    };\n  }, [node, context]);\n  React.useEffect(() => {\n    const handleUpdate = () => force({});\n    document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n    return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n  }, []);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    ...layerProps,\n    ref: composedRefs,\n    style: {\n      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? \"auto\" : \"none\" : void 0,\n      ...props.style\n    },\n    onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),\n    onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),\n    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n  });\n});\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\nvar BRANCH_NAME = \"DismissableLayerBranch\";\nvar DismissableLayerBranch = React.forwardRef((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    ...props,\n    ref: composedRefs\n  });\n});\nDismissableLayerBranch.displayName = BRANCH_NAME;\nfunction usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n  React.useEffect(() => {\n    const handlePointerDown = event => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        let handleAndDispatchPointerDownOutsideEvent2 = function () {\n          handleAndDispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n            discrete: true\n          });\n        };\n        var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;\n        const eventDetail = {\n          originalEvent: event\n        };\n        if (event.pointerType === \"touch\") {\n          ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;\n          ownerDocument.addEventListener(\"click\", handleClickRef.current, {\n            once: true\n          });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent2();\n        }\n      } else {\n        ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener(\"pointerdown\", handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener(\"pointerdown\", handlePointerDown);\n      ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true\n  };\n}\nfunction useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside);\n  const isFocusInsideReactTreeRef = React.useRef(false);\n  React.useEffect(() => {\n    const handleFocus = event => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false\n        });\n      }\n    };\n    ownerDocument.addEventListener(\"focusin\", handleFocus);\n    return () => ownerDocument.removeEventListener(\"focusin\", handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n  return {\n    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,\n    onBlurCapture: () => isFocusInsideReactTreeRef.current = false\n  };\n}\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\nfunction handleAndDispatchCustomEvent(name, handler, detail, {\n  discrete\n}) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, {\n    bubbles: false,\n    cancelable: true,\n    detail\n  });\n  if (handler) target.addEventListener(name, handler, {\n    once: true\n  });\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\nvar Root = DismissableLayer;\nvar Branch = DismissableLayerBranch;\nexport { Branch, DismissableLayer, DismissableLayerBranch, Root };","map":{"version":3,"names":["React","composeEventHandlers","Primitive","dispatchDiscreteCustomEvent","useComposedRefs","useCallbackRef","useEscapeKeydown","jsx","DISMISSABLE_LAYER_NAME","CONTEXT_UPDATE","POINTER_DOWN_OUTSIDE","FOCUS_OUTSIDE","originalBodyPointerEvents","DismissableLayerContext","createContext","layers","Set","layersWithOutsidePointerEventsDisabled","branches","DismissableLayer","forwardRef","props","forwardedRef","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","layerProps","context","useContext","node","setNode","useState","ownerDocument","globalThis","document","force","composedRefs","node2","Array","from","highestLayerWithOutsidePointerEventsDisabled","slice","highestLayerWithOutsidePointerEventsDisabledIndex","indexOf","index","isBodyPointerEventsDisabled","size","isPointerEventsEnabled","pointerDownOutside","usePointerDownOutside","event","target","isPointerDownOnBranch","some","branch","contains","defaultPrevented","focusOutside","useFocusOutside","isFocusInBranch","isHighestLayer","preventDefault","useEffect","body","style","pointerEvents","add","dispatchUpdate","delete","handleUpdate","addEventListener","removeEventListener","div","ref","onFocusCapture","onBlurCapture","onPointerDownCapture","displayName","BRANCH_NAME","DismissableLayerBranch","useRef","current","handlePointerDownOutside","isPointerInsideReactTreeRef","handleClickRef","handlePointerDown","handleAndDispatchPointerDownOutsideEvent2","handleAndDispatchPointerDownOutsideEvent","handleAndDispatchCustomEvent","eventDetail","discrete","originalEvent","pointerType","once","timerId","window","setTimeout","clearTimeout","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","CustomEvent","dispatchEvent","name","handler","detail","bubbles","cancelable","Root","Branch"],"sources":["C:\\Users\\vaibh\\OneDrive\\Desktop\\Reseachpaper\\vector\\vector\\frontend\\node_modules\\@radix-ui\\react-dismissable-layer\\src\\dismissable-layer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled!); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ComponentRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      } else {\n        // We need to remove the event listener in case the outside click has been canceled.\n        // See: https://github.com/radix-ui/primitives/issues/2171\n        ownerDocument.removeEventListener('click', handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}