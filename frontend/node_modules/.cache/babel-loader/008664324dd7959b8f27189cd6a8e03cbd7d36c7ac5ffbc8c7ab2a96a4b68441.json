{"ast":null,"code":"var _jsxFileName = \"/home/krishna/Desktop/vector/frontend/src/nodes/textNode.js\",\n  _s = $RefreshSig$();\n// textNode.js\n\nimport { BaseNode } from './BaseNode';\nimport { useStore } from '../store';\nimport { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const updateNodeField = useStore(state => state.updateNodeField);\n  const [variables, setVariables] = useState([]);\n  const textareaRef = useRef(null);\n  const containerRef = useRef(null);\n\n  // Function to extract variables from text like {{ variable }}\n  const extractVariables = text => {\n    const regex = /{{\\s*([a-zA-Z_$][\\w$]*)\\s*}}/g;\n    const matches = [...text.matchAll(regex)];\n    return [...new Set(matches.map(match => match[1]))];\n  };\n\n  // Update variables whenever the text changes\n  useEffect(() => {\n    if (data.text) {\n      const newVariables = extractVariables(data.text);\n      setVariables(newVariables);\n    }\n  }, [data.text]);\n\n  // Create handles dynamically for each variable\n  const variableHandles = variables.map((variable, index) => ({\n    id: `input-${variable}`,\n    type: 'target',\n    position: 'left',\n    style: {\n      top: `${(index + 1) * 30}px`\n    },\n    label: variable\n  }));\n\n  // Resize textarea and node dynamically\n  const handleInput = e => {\n    const textarea = textareaRef.current;\n    const container = containerRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n\n      // Adjust width (optional): e.g., based on length\n      const textLength = textarea.value.length;\n      const width = Math.min(500, Math.max(150, textLength * 7));\n      container.style.width = `${width}px`;\n\n      // Adjust container height\n      container.style.height = `${textarea.scrollHeight + 60}px`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(BaseNode, {\n      id: id,\n      data: data,\n      title: \"Text\",\n      outputs: [{\n        id: 'output',\n        label: 'Output'\n      }],\n      inputs: variableHandles,\n      fields: [{\n        type: 'textarea',\n        name: 'text',\n        label: 'Text',\n        defaultValue: '{{input}}',\n        rows: 2,\n        ref: textareaRef,\n        style: {\n          width: '100%',\n          minHeight: '40px',\n          resize: 'none',\n          overflow: 'hidden',\n          padding: '8px',\n          boxSizing: 'border-box',\n          fontFamily: 'monospace'\n        },\n        onInput: e => {\n          handleInput(e);\n          updateNodeField(id, 'text', e.target.value);\n        }\n      }],\n      onFieldChange: (fieldName, value) => updateNodeField(id, fieldName, value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"BvcOL51YUVAJyutGefDvU1oyrGU=\", false, function () {\n  return [useStore];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["BaseNode","useStore","useEffect","useState","useRef","jsxDEV","_jsxDEV","TextNode","id","data","_s","updateNodeField","state","variables","setVariables","textareaRef","containerRef","extractVariables","text","regex","matches","matchAll","Set","map","match","newVariables","variableHandles","variable","index","type","position","style","top","label","handleInput","e","textarea","current","container","height","scrollHeight","textLength","value","length","width","Math","min","max","ref","children","title","outputs","inputs","fields","name","defaultValue","rows","minHeight","resize","overflow","padding","boxSizing","fontFamily","onInput","target","onFieldChange","fieldName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/krishna/Desktop/vector/frontend/src/nodes/textNode.js"],"sourcesContent":["// textNode.js\r\n\r\nimport { BaseNode } from './BaseNode';\r\nimport { useStore } from '../store';\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nexport const TextNode = ({ id, data }) => {\r\n  const updateNodeField = useStore((state) => state.updateNodeField);\r\n  const [variables, setVariables] = useState([]);\r\n  const textareaRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  // Function to extract variables from text like {{ variable }}\r\n  const extractVariables = (text) => {\r\n    const regex = /{{\\s*([a-zA-Z_$][\\w$]*)\\s*}}/g;\r\n    const matches = [...text.matchAll(regex)];\r\n    return [...new Set(matches.map(match => match[1]))];\r\n  };\r\n\r\n  // Update variables whenever the text changes\r\n  useEffect(() => {\r\n    if (data.text) {\r\n      const newVariables = extractVariables(data.text);\r\n      setVariables(newVariables);\r\n    }\r\n  }, [data.text]);\r\n\r\n  // Create handles dynamically for each variable\r\n  const variableHandles = variables.map((variable, index) => ({\r\n    id: `input-${variable}`,\r\n    type: 'target',\r\n    position: 'left',\r\n    style: { top: `${(index + 1) * 30}px` },\r\n    label: variable\r\n  }));\r\n\r\n  // Resize textarea and node dynamically\r\n  const handleInput = (e) => {\r\n    const textarea = textareaRef.current;\r\n    const container = containerRef.current;\r\n\r\n    if (textarea) {\r\n      textarea.style.height = 'auto';\r\n      textarea.style.height = `${textarea.scrollHeight}px`;\r\n\r\n      // Adjust width (optional): e.g., based on length\r\n      const textLength = textarea.value.length;\r\n      const width = Math.min(500, Math.max(150, textLength * 7));\r\n      container.style.width = `${width}px`;\r\n\r\n      // Adjust container height\r\n      container.style.height = `${textarea.scrollHeight + 60}px`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef}>\r\n      <BaseNode\r\n        id={id}\r\n        data={data}\r\n        title=\"Text\"\r\n        outputs={[{ id: 'output', label: 'Output' }]}\r\n        inputs={variableHandles}\r\n        fields={[\r\n          {\r\n            type: 'textarea',\r\n            name: 'text',\r\n            label: 'Text',\r\n            defaultValue: '{{input}}',\r\n            rows: 2,\r\n            ref: textareaRef,\r\n            style: {\r\n              width: '100%',\r\n              minHeight: '40px',\r\n              resize: 'none',\r\n              overflow: 'hidden',\r\n              padding: '8px',\r\n              boxSizing: 'border-box',\r\n              fontFamily: 'monospace'\r\n            },\r\n            onInput: (e) => {\r\n              handleInput(e);\r\n              updateNodeField(id, 'text', e.target.value);\r\n            }\r\n          }\r\n        ]}\r\n        onFieldChange={(fieldName, value) => updateNodeField(id, fieldName, value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}