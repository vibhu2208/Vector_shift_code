{"ast":null,"code":"import { memo } from 'motion-utils';\nimport { isHTMLElement } from '../../../utils/is-html-element.mjs';\n\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\"\n// TODO: Could be re-enabled now we have support for linear() easing\n// \"background-color\"\n]);\n\nconst supportsWaapi = /*@__PURE__*/memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\nfunction supportsBrowserAnimation(options) {\n  const {\n    motionValue,\n    name,\n    repeatDelay,\n    repeatType,\n    damping,\n    type\n  } = options;\n  if (!isHTMLElement(motionValue?.owner?.current)) {\n    return false;\n  }\n  const {\n    onUpdate,\n    transformTemplate\n  } = motionValue.owner.getProps();\n  return supportsWaapi() && name && acceleratedValues.has(name) && (name !== \"transform\" || !transformTemplate) &&\n  /**\r\n   * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n   * no way to read the value from WAAPI every frame.\r\n   */\n  !onUpdate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n}\nexport { supportsBrowserAnimation };","map":{"version":3,"names":["memo","isHTMLElement","acceleratedValues","Set","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","supportsBrowserAnimation","options","motionValue","name","repeatDelay","repeatType","damping","type","owner","current","onUpdate","transformTemplate","getProps","has"],"sources":["C:/Users/vaibh/OneDrive/Desktop/Reseachpaper/vector/vector/node_modules/motion-dom/dist/es/animation/waapi/supports/waapi.mjs"],"sourcesContent":["import { memo } from 'motion-utils';\r\nimport { isHTMLElement } from '../../../utils/is-html-element.mjs';\r\n\r\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\r\nconst acceleratedValues = new Set([\r\n    \"opacity\",\r\n    \"clipPath\",\r\n    \"filter\",\r\n    \"transform\",\r\n    // TODO: Could be re-enabled now we have support for linear() easing\r\n    // \"background-color\"\r\n]);\r\nconst supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\r\nfunction supportsBrowserAnimation(options) {\r\n    const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\r\n    if (!isHTMLElement(motionValue?.owner?.current)) {\r\n        return false;\r\n    }\r\n    const { onUpdate, transformTemplate } = motionValue.owner.getProps();\r\n    return (supportsWaapi() &&\r\n        name &&\r\n        acceleratedValues.has(name) &&\r\n        (name !== \"transform\" || !transformTemplate) &&\r\n        /**\r\n         * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n         * no way to read the value from WAAPI every frame.\r\n         */\r\n        !onUpdate &&\r\n        !repeatDelay &&\r\n        repeatType !== \"mirror\" &&\r\n        damping !== 0 &&\r\n        type !== \"inertia\");\r\n}\r\n\r\nexport { supportsBrowserAnimation };\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,cAAc;AACnC,SAASC,aAAa,QAAQ,oCAAoC;;AAElE;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAC9B,SAAS,EACT,UAAU,EACV,QAAQ,EACR;AACA;AACA;AAAA,CACH,CAAC;;AACF,MAAMC,aAAa,GAAG,aAAcJ,IAAI,CAAC,MAAMK,MAAM,CAACC,cAAc,CAACC,IAAI,CAACC,OAAO,CAACC,SAAS,EAAE,SAAS,CAAC,CAAC;AACxG,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EACvC,MAAM;IAAEC,WAAW;IAAEC,IAAI;IAAEC,WAAW;IAAEC,UAAU;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGN,OAAO;EAC7E,IAAI,CAACV,aAAa,CAACW,WAAW,EAAEM,KAAK,EAAEC,OAAO,CAAC,EAAE;IAC7C,OAAO,KAAK;EAChB;EACA,MAAM;IAAEC,QAAQ;IAAEC;EAAkB,CAAC,GAAGT,WAAW,CAACM,KAAK,CAACI,QAAQ,CAAC,CAAC;EACpE,OAAQlB,aAAa,CAAC,CAAC,IACnBS,IAAI,IACJX,iBAAiB,CAACqB,GAAG,CAACV,IAAI,CAAC,KAC1BA,IAAI,KAAK,WAAW,IAAI,CAACQ,iBAAiB,CAAC;EAC5C;AACR;AACA;AACA;EACQ,CAACD,QAAQ,IACT,CAACN,WAAW,IACZC,UAAU,KAAK,QAAQ,IACvBC,OAAO,KAAK,CAAC,IACbC,IAAI,KAAK,SAAS;AAC1B;AAEA,SAASP,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}